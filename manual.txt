##################### Pre-requisite ##########################################################################################
## AWS CLI


## kubectl

aws --version
install awscli: 

curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
unzip awscliv2.zip
which aws
sudo ./aws/install --bin-dir /usr/bin --install-dir /usr/bin/aws-cli --update
aws --version


#################

kubectl intall 

curl -o kubectl https://amazon-eks.s3.us-west-2.amazonaws.com/1.16.8/2020-04-16/bin/linux/amd64/kubectl
chmod +x ./kubectl
mkdir -p $HOME/bin && cp ./kubectl $HOME/bin/kubectl && export PATH=$PATH:$HOME/bin
kubectl version --short --client
curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
sudo mv /tmp/eksctl /usr/bin 
eksctl version
eksctl version





##################### Create AWS EKS clsuster ################################################################################

eksctl create cluster --name eksargocd --node-type t2.large --nodes 2 --nodes-min 1 --nodes-max 3 --region us-east-2 

## Get EKS Cluster service
eksctl get cluster --name eksargocd --region us-east-2

## Update Kubeconfig 
aws eks update-kubeconfig --name eksargocd --region us-east-2

## Get EKS Pod data.
kubectl get pods --all-namespaces

## Delete EKS cluster
eksctl delete cluster --name eksargocd --region us-east-2

##################################################CREATE AWS EKS CD with ArgoCD #######################################################
## Installing Argo CD on Your Cluster
1.Check if kubectl is working as expected
  kubectl get cluster
  kubectl get nodes

2.Create namespace
  kubectl create namespace argocd
  
3.Run the Argo CD install script provided by the project maintainers.
  kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml
  
4. Check the status of your Kubernetes pods
  kubectl get pods -n argocd

 kubectl get all -n argocd

5. kubectl port-forward  service/argocd-server 8080:80 -n argocd
https://localhost:8080/


6. kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" | base64 -d; echo


5.2 forward those to arbitrarily chosen other ports, like 8080, like so:
  kubectl port-forward svc/argocd-server -n argocd 8080:443
  
5.3 Access from ineternet from browser.
  http://localhost:8080 
  user id : admin
  password :DMmPFZogrhZ6ZEor
  
## Working with Argo CD from the Command Line
6. Use chocolatey utility to install in Windows ( with admin access)
   choco install argocd-cli
   
## Deploying an Example Application from argocd using argocd cli
7. Deploying an Example Application
  argocd login localhost:8080
  user id : admin
  password :base64 decoded password.
  argocd app create helm-guestbook --repo https://github.com/argoproj/argocd-example-apps.git --path helm-guestbook --dest-server https://kubernetes.default.svc --dest-namespace default
  
7.1 Check status inside argocd
  argocd app get helm-guestbook

7.2 Actually deploy the application
  argocd app sync helm-guestbook

7.3 Port foward from onther session check the application status
  kubectl port-forward svc/guestbook-helm-guestbook 9090:80
  http://localhost:9090

#############################################################################################################################################

kubectl create namespace argocd

7.3 Port foward from onther session check the application status
  kubectl port-forward svc/guestbook-helm-guestbook 9090:80 -n myapp
  http://localhost:9090

  ===============



  kubectl	get ns

eksctl get cluster --name eksargocd --region us-east-2

kubectl get pods --all-namespaces


AWS EKS CD with ArgoCD



kubectl create namespace argocd

kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml

kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" | base64 -d; echo


kubectl port-forward svc/argocd-server -n argocd 8080:443
http://localhost:8080 

kubectl port-forward svc/guestbook-helm-guestbook 9090:80 -n myapp
http://localhost:9090